#ifndef JsonMessage_sS_H
#define JsonMessage_sS_H

#include <Arduino.h>
#include <ArduinoJson.h>
#include <string>
#include "JsonBundle.hpp"

namespace wyp
{

using namespace std;

#define DESTINATION_WS_CLIENTS 0

/**
 * @brief Represents a json message
 * 
 * Message diagram:
 * 
 * Root
 * |-- password: <Password>,<password salt>
 * |-- arguments: <Arguments>
 * |-- checksum: <Checksum>,<salt>
 * 
 * Where:
 * - Password is a sha256 cs followed by a salt relative to the password only
 * - Arguments, that's explicit enough
 * - Checksum is a cs of the arguments, coming with a salt generated by the module and retransmitted with the next message
 * 
 */
struct JsonMessage_s : public JsonBundle_s
{
  //methods
public:
  JsonMessage_s(const uint32_t from, const uint32_t to);
  JsonMessage_s(const char *message);
  ~JsonMessage_s();

  /**
 * @brief check if all the requiered parameter were present, ie. is the message conform to the json pattern requiered for exploitation
 * 
 * @return true if it can be utilized
 * @return false if it can't
 */
  bool IsConform();

  JsonObject &Arguments() const;
  const char *Checksum() const;

  bool IsChecksumCorrect(const char *password, const int pass_salt, const int salt);
  void ComputeChecksum(const char *password, const int pass_salt, const int salt);
  void PrepareToSend(const char *password, const int pass_salt, const int salt);

  static char *GenerateChecksum(const char *password, const int pass_salt, const int salt, const JsonObject &payload);

  /**
   * @brief if the value is 0, then it's coming from outside the painless mesh network
   * 
   * @return uint32_t 
   */
  uint32_t From() { return _from; }
  /**
   * @brief if it's 0 then it's goind outside the painless mesh network, ie voigin through the ws
   * 
   * @return uint32_t 
   */
  uint32_t To() { return _to; }

  //variables
protected:
  JsonVariant arguments;
  bool isConform = true;

private:
  uint32_t _from = 0;
  uint32_t _to = 0;
  char *_hash = NULL;
};

struct JsonResponse_s : public JsonMessage_s
{
public:
  JsonResponse_s(const uint32_t from, const uint32_t to);
  int Salt() const;

private:
};

struct JsonReceived_s : public JsonMessage_s
{
public:
  JsonReceived_s(const char *message);
  int Salt() const;
  int PassSalt() const;

private:
  //args + pass_salted + salt
};
} // namespace wyp
#endif